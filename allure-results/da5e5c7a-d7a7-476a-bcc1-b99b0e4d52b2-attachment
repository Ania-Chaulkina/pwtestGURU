# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: авторизованый пользователь может посмотреть список статей
- Location: C:\Users\Admin\Desktop\pwtestGURU\tests\function.spec.js:39:5

# Error details

```
Error: page.goto: net::ERR_ABORTED; maybe frame was detached?
Call log:
  - navigating to "https://realworld.qa.guru/", waiting until "load"

    at registerRandomUserVersion2 (C:\Users\Admin\Desktop\pwtestGURU\tests\function.spec.js:21:16)
    at C:\Users\Admin\Desktop\pwtestGURU\tests\function.spec.js:40:26
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { faker } from '@faker-js/faker';
   3 |
   4 | //Всего 4 типа функций
   5 | //Первый: function declaration
   6 | async function registerRandomUser (page, name, email, password) {
   7 |     await page.goto('https://realworld.qa.guru/');
   8 |     await page.getByRole('link', { name: 'Sign up' }).click();
   9 |     await page.getByRole('textbox', { name: 'Your Name' }).click();
  10 |     await page.getByRole('textbox', { name: 'Your Name' }).fill(faker.internet.username());
  11 |     await page.getByRole('textbox', { name: 'Email' }).click();
  12 |     await page.getByRole('textbox', { name: 'Email' }).fill(faker.internet.email());
  13 |     await page.getByRole('textbox', { name: 'Password' }).click();
  14 |     await page.getByRole('textbox', { name: 'Password' }).fill(pfaker.internet.password());
  15 |     await page.getByRole('button', { name: 'Sign up' }).click();
  16 | };
  17 |
  18 | //Второй: function expression
  19 |     const registerRandomUserVersion2 = async (page) => {
  20 |       const username = faker.internet.username();
> 21 |     await page.goto('https://realworld.qa.guru/');
     |                ^ Error: page.goto: net::ERR_ABORTED; maybe frame was detached?
  22 |     await page.getByRole('link', { name: 'Sign up' }).click();
  23 |     await page.getByRole('textbox', { name: 'Your Name' }).click();
  24 |     await page.getByRole('textbox', { name: 'Your Name' }).fill(username);
  25 |     await page.getByRole('textbox', { name: 'Email' }).click();
  26 |     await page.getByRole('textbox', { name: 'Email' }).fill(faker.internet.email());
  27 |     await page.getByRole('textbox', { name: 'Password' }).click();
  28 |     await page.getByRole('textbox', { name: 'Password' }).fill(faker.internet.password());
  29 |     await page.getByRole('button', { name: 'Sign up' }).click();
  30 |     return username;
  31 |     };
  32 |
  33 |
  34 | //Третий: arrow function - стрелочная функция const greet = (name) => `Hello, $(name)!`;
  35 | /*Четвертый: IIFE - (function () {
  36 | console.log('запуск сразу после объявления');
  37 | }) */
  38 |
  39 | test('авторизованый пользователь может посмотреть список статей', async ({ page }) => {
  40 |   const username = await registerRandomUserVersion2 (page);
  41 |
  42 |     /*Для скрина где стопается тест
  43 |     await page.screenshot({ path: 'Error.png', fullPage: true }); */
  44 |     await expect(page.getByRole('navigation')).toContainText(username);  
  45 |   });
  46 |
  47 |
  48 |   test('авторизация через логин и пароль', async ({ page }) => {
  49 |     const username = await registerRandomUserVersion2 (page);
  50 |     await expect(page.getByRole('navigation')).toContainText(username);  
  51 |   });
```