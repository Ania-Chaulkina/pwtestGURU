# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: test
- Location: /home/runner/work/pwtestGURU/pwtestGURU/tests/demo.spec.js:3:5

# Error details

```
Error: page.goto: net::ERR_FILE_NOT_FOUND at file:///C:/Users/Admin/Documents/demo.html
Call log:
  - navigating to "file:///C:/Users/Admin/Documents/demo.html", waiting until "load"

    at /home/runner/work/pwtestGURU/pwtestGURU/tests/demo.spec.js:5:14
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test('test', async ({ page }) => {
   4 |     // Поиск элемента по типу
>  5 |   await page.goto('file:///C:/Users/Admin/Documents/demo.html');
     |              ^ Error: page.goto: net::ERR_FILE_NOT_FOUND at file:///C:/Users/Admin/Documents/demo.html
   6 |   await page.getByRole('textbox', { name: 'Email' }).fill('tesssa@ya.ru');
   7 |   await page.getByRole('textbox', { name: 'Пароль' }).fill('123456');
   8 |   await page.getByRole('button', { name: 'Войти' }).click();
   9 | });
  10 |
  11 | test.skip('test Class', async ({ page }) => {
  12 |     // Поиск элемента по классу
  13 |   await page.goto('file:///C:/Users/Admin/Documents/demo.html');
  14 |   /* Разобраться с классом
  15 |   await page.locator('.el-input__inner:first-child', { name: 'Email' }).fill('tesssa@ya.ru');*/
  16 |
  17 |   await page.locator('.el-input', 'text=Playwright').fill('tesssa@ya.ru');
  18 |   await page.locator('.el-input__inner', { name: 'Пароль' }).fill('123456');
  19 |   await page.locator('.el-button', { name: 'Пароль' }).click();
  20 | });
  21 |
  22 | /*
  23 |   await expect(page.locator('span')).toMatchAriaSnapShot(`- text: Войти`);*/
  24 |
  25 |   test('test by ID', async ({ page }) => {
  26 |     // Поиск элемента по ID
  27 |   await page.goto('file:///C:/Users/Admin/Documents/demo.html');
  28 |
  29 |   await page.locator('#email').fill('tesssa@ya.ru');
  30 |   await page.locator('#password').fill('123456');
  31 |   await page.getByRole('button', { name: 'Войти' }).click();
  32 | });
  33 |
  34 | test.skip('test form', async ({ page }) => {
  35 |   await page.goto('https://demoqa.com/automation-practice-form');
  36 |   await page.getByRole('textbox', { name: 'First Name' }).click();
  37 |   await page.getByRole('textbox', { name: 'First Name' }).fill('Tttttt');
  38 |   await page.getByRole('textbox', { name: 'Last Name' }).click();
  39 |   await page.getByRole('textbox', { name: 'Last Name' }).fill('Eeeee');
  40 |   await page.getByRole('textbox', { name: 'name@example.com' }).click();
  41 |   await page.getByRole('textbox', { name: 'name@example.com' }).fill('test@rr.com');
  42 |   await page.getByText('Female').click();
  43 |   await page.getByRole('textbox', { name: 'Mobile Number' }).click();
  44 |   await page.getByRole('textbox', { name: 'Mobile Number' }).fill('+793130836');
  45 |   await page.locator('#dateOfBirthInput').click();
  46 |   await page.locator('div').filter({ hasText: /^JanuaryFebruaryMarchAprilMayJuneJulyAugustSeptemberOctoberNovemberDecember$/ }).getByRole('combobox').selectOption('9');
  47 |   await page.getByRole('option', { name: 'Choose Tuesday, October 7th,' }).click();
  48 |   await page.locator('#dateOfBirthInput').click();
  49 |   await page.getByRole('combobox').nth(1).selectOption('2006');
  50 |   await page.getByRole('option', { name: 'Choose Tuesday, October 10th,' }).click();
  51 |   await page.getByText('Sports').click();
  52 |   await page.getByText('Music').click();
  53 |   await page.getByRole('textbox', { name: 'Current Address' }).click();
  54 |   await page.getByRole('textbox', { name: 'Current Address' }).fill('my adress');
  55 |   await page.getByRole('button', { name: 'Submit' }).click();
  56 |   await page.getByRole('textbox', { name: 'Mobile Number' }).click();
  57 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowLeft');
  58 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowLeft');
  59 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowLeft');
  60 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowLeft');
  61 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowLeft');
  62 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowLeft');
  63 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowLeft');
  64 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowLeft');
  65 |   await page.getByRole('textbox', { name: 'Mobile Number' }).fill('93130836');
  66 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowRight');
  67 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowRight');
  68 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowRight');
  69 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowRight');
  70 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowRight');
  71 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowRight');
  72 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowRight');
  73 |   await page.getByRole('textbox', { name: 'Mobile Number' }).press('ArrowRight');
  74 |   await page.getByRole('textbox', { name: 'Mobile Number' }).fill('9313083646');
  75 |   await page.getByRole('button', { name: 'Submit' }).click();
  76 |   await expect(page.getByRole('cell', { name: 'Values' })).toBeVisible();
  77 |   await expect(page.locator('tbody')).toContainText('Sports, Music');
  78 |   await expect(page.locator('tbody')).toContainText('test@rr.com');
  79 |   await expect(page.locator('tbody')).toMatchAriaSnapshot(`- cell "Student Name"`);
  80 |   await expect(page.locator('tbody')).toMatchAriaSnapshot(`- cell "Tttttt Eeeee"`);
  81 | });
  82 |
  83 |
  84 |
  85 |
```